Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/11/22 18:13:16
3String Primitives and Macros   (stonjeff_proj6.asm	     Page 1 - 1


				TITLE String Primitives and Macros   (stonjeff_proj6.asm)

				; Author: Jeff "Gent" Stone
				; Last Modified: 3/9/2022
				; OSU email address: stonjeff@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6            Due Date: 3/13/2022
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ------------------------------------------------------------------------------------
				; Name: mDisplayString 
				; Description: This macro displays string statements to the console
				; Preconditions: Statement variables declared and passed by reference.
				; Postconditions: Statement displayed to console
				; Receives: stringAddr (input, reference)
				; Returns:  N/A
				; ------------------------------------------------------------------------------------
				mDisplayString	MACRO	stringAddr:REQ
				  push	edx
				  mov	edx,	stringAddr
				  call	WriteString
				  pop	edx
				ENDM

				; ------------------------------------------------------------------------------------
				; Name: mGetString
				; Description:	This macro displays a message prompt to user by invoking mDisplayString
				;				and then calls ReadString to receive keyboard input from user, which is 
				;				passed to a buffer with restricted size.
				; Preconditions:  Message prompt string & string buffer declared and addresses passed 
				;				  by reference. Size of buffer passed by value.
				; Postconditions: Prompt displayed and user-entered value returned in edx, size of user 
				;				  entry (in bytes) moved from eax to byteCount
				; Receives:	promptAddr, bufferAddr, BUFF_SIZE, where:
				;			promptAddr	= address of prompt message (input, reference)
				;			bufferAddr	= address of entered string/buffer (output, reference)
				;			BUFF_SIZE	= max length (20 bytes) of string (input, value)
				; Returns:	EDX = buffer address of user string
				;			EAX = number of characters entered which is moved to byteCount
				;			byteCount	= number of characters in bytes (output, reference)
				; ------------------------------------------------------------------------------------
				mGetString	MACRO	promptAddr:REQ, bufferAddr:REQ, byteCount:REQ
				  push	eax
				  push	ecx
				  push	edx
				  mDisplayString	promptAddr

				  mov	edx,		bufferAddr	; point to the buffer
				  mov	ecx,		BUFF_SIZE	; specify max character allowed in string
				  call	ReadString
				  mov	byteCount,	eax			; number of characters entered moved FROM EAX to byteCount
				  pop	edx
				  pop	ecx
				  pop	eax
				ENDM

 00000000			.const								

				; CONSTANTS
 = 0000000A			INT_COUNT	equ 10
 = 00000017			BUFF_SIZE	equ	23	

 00000000			.data

				; STATEMENTS
 00000000 50 72 6F 6A 65	  introMsg		BYTE	"Project 6: String Primitives and Macros.", 09, "By Gent Stone", 13, 10, 10, 0
	   63 74 20 36 3A
	   20 53 74 72 69
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 2E
	   09 42 79 20 47
	   65 6E 74 20 53
	   74 6F 6E 65 0D
	   0A 0A 00
 0000003A 54 68 69 73 20	  intInstruct	BYTE	"This program will ask you to enter 10 signed integers.", 13, 10
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 61 73
	   6B 20 79 6F 75
	   20 74 6F 20 65
	   6E 74 65 72 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A
 00000072  45 61 63 68 20					BYTE	"Each of the integers and their sum must fit within a 32-bit register.", 13, 10
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 73 75 6D 20
	   6D 75 73 74 20
	   66 69 74 20 77
	   69 74 68 69 6E
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A
 000000B9  59 6F 75 20 63					BYTE	"You can only enter 0, + or - in front of the integers.", 13, 10
	   61 6E 20 6F 6E
	   6C 79 20 65 6E
	   74 65 72 20 30
	   2C 20 2B 20 6F
	   72 20 2D 20 69
	   6E 20 66 72 6F
	   6E 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A
 000000F1  54 68 65 20 70					BYTE	"The program will display the 10 integers, their sum and truncated average.", 13, 10
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   74 68 65 20 31
	   30 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 20 61 6E 64
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 2E 0D
	   0A
 0000013D  2A 2A 45 43 31					BYTE	"**EC1: Each line of valid input will display the line number and current subtotal.", 13, 10
	   3A 20 45 61 63
	   68 20 6C 69 6E
	   65 20 6F 66 20
	   76 61 6C 69 64
	   20 69 6E 70 75
	   74 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   74 68 65 20 6C
	   69 6E 65 20 6E
	   75 6D 62 65 72
	   20 61 6E 64 20
	   63 75 72 72 65
	   6E 74 20 73 75
	   62 74 6F 74 61
	   6C 2E 0D 0A
 00000191  2A 2A 45 43 32					BYTE	"**EC2: You will also be asked to enter 10 decimal (floating point) integers,", 13, 10
	   3A 20 59 6F 75
	   20 77 69 6C 6C
	   20 61 6C 73 6F
	   20 62 65 20 61
	   73 6B 65 64 20
	   74 6F 20 65 6E
	   74 65 72 20 31
	   30 20 64 65 63
	   69 6D 61 6C 20
	   28 66 6C 6F 61
	   74 69 6E 67 20
	   70 6F 69 6E 74
	   29 20 69 6E 74
	   65 67 65 72 73
	   2C 0D 0A
 000001DF  77 68 69 63 68					BYTE	"which will be displayed, along with their sum and average.", 13, 10, 10
	   20 77 69 6C 6C
	   20 62 65 20 64
	   69 73 70 6C 61
	   79 65 64 2C 20
	   61 6C 6F 6E 67
	   20 77 69 74 68
	   20 74 68 65 69
	   72 20 73 75 6D
	   20 61 6E 64 20
	   61 76 65 72 61
	   67 65 2E 0D 0A
	   0A
 0000021C  59 6F 75 20 77					BYTE	"You will now enter the first 10 integers!", 13, 10, 10, 0
	   69 6C 6C 20 6E
	   6F 77 20 65 6E
	   74 65 72 20 74
	   68 65 20 66 69
	   72 73 74 20 31
	   30 20 69 6E 74
	   65 67 65 72 73
	   21 0D 0A 0A 00
 00000249 59 6F 75 20 77	  fltInstruct	BYTE	"You will now enter 10 decimal (floating point) integers.", 13, 10, 10, 0
	   69 6C 6C 20 6E
	   6F 77 20 65 6E
	   74 65 72 20 31
	   30 20 64 65 63
	   69 6D 61 6C 20
	   28 66 6C 6F 61
	   74 69 6E 67 20
	   70 6F 69 6E 74
	   29 20 69 6E 74
	   65 67 65 72 73
	   2E 0D 0A 0A 00
 00000285  45 61 63 68 20					BYTE	"Each of the decimal integers and their sum fit within a 32-bit register.", 13, 10
	   6F 66 20 74 68
	   65 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 20 61
	   6E 64 20 74 68
	   65 69 72 20 73
	   75 6D 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 2D 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 0D 0A
 000002CF  59 6F 75 20 63					BYTE	"You can only enter 0, + or - in front of the integers and a decimal . as a radix.", 13, 10, 10, 0
	   61 6E 20 6F 6E
	   6C 79 20 65 6E
	   74 65 72 20 30
	   2C 20 2B 20 6F
	   72 20 2D 20 69
	   6E 20 66 72 6F
	   6E 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 20 61
	   6E 64 20 61 20
	   64 65 63 69 6D
	   61 6C 20 2E 20
	   61 73 20 61 20
	   72 61 64 69 78
	   2E 0D 0A 0A 00
 00000324 45 6E 74 65 72	  intPromptMsg	BYTE	"Enter an integer: ", 0
	   20 61 6E 20 69
	   6E 74 65 67 65
	   72 3A 20 00
 00000337 45 6E 74 65 72	  decPromptMsg	BYTE	"Enter a decimal integer: ", 0
	   20 61 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 3A 20
	   00
 00000351 45 52 52 4F 52	  errorMsg		BYTE	"ERROR: Invalid input. Please try again: ", 0
	   3A 20 49 6E 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   2E 20 50 6C 65
	   61 73 65 20 74
	   72 79 20 61 67
	   61 69 6E 3A 20
	   00
 0000037A 54 68 65 20 63	  subtotalMsg	BYTE	"The current subtotal is: ", 0
	   75 72 72 65 6E
	   74 20 73 75 62
	   74 6F 74 61 6C
	   20 69 73 3A 20
	   00
 00000394 59 6F 75 20 65	  enteredMsg	BYTE	"You entered the following integers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 69 6E 74 65
	   67 65 72 73 3A
	   0D 0A 00
 000003BA 54 68 65 20 73	  sumMsg		BYTE	"The sum of these integers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 69 6E 74
	   65 67 65 72 73
	   20 69 73 3A 20
	   00
 000003D9 54 68 65 20 74	  truncAvgMsg	BYTE	"The truncated average of these integers is: ", 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 73 65
	   20 69 6E 74 65
	   67 65 72 73 20
	   69 73 3A 20 00
 00000406 54 68 65 20 61	  avgMsg		BYTE	"The average of these decimal integers is: ", 0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 73 65
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 20 69 73
	   3A 20 00
 00000431 54 68 61 6E 6B	  byeMsg		BYTE	"Thanks for using this program. Goodbye!", 13, 10, 10, 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 74 68 69
	   73 20 70 72 6F
	   67 72 61 6D 2E
	   20 47 6F 6F 64
	   62 79 65 21 0D
	   0A 0A 00
 0000045C 2C 20 00		  spacer		BYTE	", ", 0
 0000045F 2E 20 00		  period		BYTE	". ", 0

				; VARIABLES
 00000462  0000000A [		  intArray		SDWORD	INT_COUNT	DUP(?)	; List to hold the user-entered integers
	    00000000
	   ]
 0000048A  0000000A [		  decIntArray	REAL4	INT_COUNT	DUP(?)	; List to hold the user-entered decimal integers
	    00000000
	   ]
 000004B2  0000000A [		  intCountArray	DWORD	INT_COUNT	DUP(?)	; List to hold the 
	    00000000
	   ]
 000004DA 00000000		  intSum		SDWORD	?					; Sum of integers
 000004DE 00000000		  intAvg		SDWORD	?					; Average of integers
 000004E2 00000000		  lineNum		DWORD	?					; Tracks current line number
 000004E6 00000000		  decIntSum		REAL4	?					; Sum of decimal integers
 000004EA 00000000		  decIntAvg		REAL4	?					; Average of decimal integers
 000004EE 0000000A		  intCount		DWORD	INT_COUNT			; Used with FILD to convert int to float
 000004F2  00000017 [		  stringBuffer	BYTE	BUFF_SIZE	DUP(?)	; Buffer array to hold user-entered string
	    00
	   ]
 00000509 00000000		  stringCount	DWORD	?					; Tracks number of user-entered characters after 
															; ReadString called to set counter in char loop

 00000000			.code
 00000000			main PROC

				;---------------------------------------------------------------
				; Introduction - invoke mDisplayString and pass introMsg parameter
				;---------------------------------------------------------------
				  mDisplayString	OFFSET	introMsg
 00000000  52		     1	  push	edx
 00000001  BA 00000000 R     1	  mov	edx,	OFFSET	introMsg
 00000006  E8 00000000 E     1	  call	WriteString
 0000000B  5A		     1	  pop	edx
				  mDisplayString	OFFSET	intInstruct
 0000000C  52		     1	  push	edx
 0000000D  BA 0000003A R     1	  mov	edx,	OFFSET	intInstruct
 00000012  E8 00000000 E     1	  call	WriteString
 00000017  5A		     1	  pop	edx

				;---------------------------------------------------------------
				; Build Integer Array - Displays line number and then sets up loop 
				;	to call the ReadVal procedure which reads user character input 
				;	as a string, checks that string input is valid & then casts to 
				;	integer,then moves to integer array and returns to loop.
				;	Current subtotal is displayed by invoking mDisplayString with
				;	subtotal message and calling WriteVal to display subtotal.
				;	Then line number is incremented and loop continues until ECX = 0.
				;---------------------------------------------------------------
 00000018  B9 0000000A		  mov	ecx,		INT_COUNT		
 0000001D  C7 05 000004E2 R	  mov	lineNum,	1
	   00000001
 00000027			_BuildArray:
 00000027  FF 35 000004E2 R	  push	lineNum								; Display line number by
 0000002D  E8 0000019A		  call	WriteVal							; calling WriteVal
				  mDisplayString	OFFSET		period
 00000032  52		     1	  push	edx
 00000033  BA 0000045F R     1	  mov	edx,	OFFSET		period
 00000038  E8 00000000 E     1	  call	WriteString
 0000003D  5A		     1	  pop	edx
															; Push statement parameters to
 0000003E  68 00000351 R	  push	OFFSET		errorMsg				; [ebp + 24]
 00000043  68 00000324 R	  push	OFFSET		intPromptMsg			; [ebp + 20]
 00000048  68 00000462 R	  push	OFFSET		intArray				; [ebp + 16]
 0000004D  68 00000509 R	  push	OFFSET		stringCount				; [ebp + 12]
 00000052  68 000004F2 R	  push	OFFSET		stringBuffer			; [ebp + 8]
 00000057  E8 000000DA		  call	ReadVal								; and call ReadVal procedure

 0000005C  8B 07		  mov	eax,		[edi]					; move entered value to eax
 0000005E  01 05 000004DA R	  add	intSum,		eax						; increment subtotal
				  mDisplayString	OFFSET		subtotalMsg	; Display subtotal message
 00000064  52		     1	  push	edx
 00000065  BA 0000037A R     1	  mov	edx,	OFFSET		subtotalMsg
 0000006A  E8 00000000 E     1	  call	WriteString
 0000006F  5A		     1	  pop	edx
 00000070  FF 35 000004DA R	  push	intSum
 00000076  E8 00000151		  call	WriteVal							; Display subtotal

 0000007B  E8 00000000 E	  call	CrLf
 00000080  83 C7 04		  add	edi,		TYPE		intArray	; iterate index of array (4 bytes)
 00000083  FF 05 000004E2 R	  inc	lineNum
 00000089  E2 9C		  LOOP	_BuildArray

				;---------------------------------------------------------------
				; Display integers - Invoke mDisplayString to display user-entered values message 
				;	and then push the address integer array and stringBuffer to WriteVal
				;	set a loop (size of intArray) to display all entered integers from the 
				;	the array as strings in WriteVal, separated by a spacer (comma and space)
				;	by invoking mDisplayString with the spacer string.
				;---------------------------------------------------------------
				  mDisplayString	OFFSET		enteredMsg	; Display integers entered message
 0000008B  52		     1	  push	edx
 0000008C  BA 00000394 R     1	  mov	edx,	OFFSET		enteredMsg
 00000091  E8 00000000 E     1	  call	WriteString
 00000096  5A		     1	  pop	edx
 00000097  B9 0000000A		  mov	ecx,		INT_COUNT				; Set counter
 0000009C  BE 00000462 R	  mov	esi,		OFFSET		intArray	; move address of array to esi
 000000A1			_DisplayArray:
 000000A1  68 000004F2 R	  push	OFFSET		stringBuffer			; [ebp + 12]
 000000A6  FF 36		  push	[esi]								; [ebp + 8] push currently referenced value of esi
 000000A8  E8 0000011F		  call	WriteVal
 000000AD  83 C6 04		  add	esi,		TYPE		intArray	; increment to next index address in array
 000000B0  83 F9 01		  cmp	ecx,		1						; Check whether integer is last in array
 000000B3  74 0C		  je	_NoSpacer
				  mDisplayString	OFFSET		spacer		; Invoke mSisplayString to display spacer
 000000B5  52		     1	  push	edx
 000000B6  BA 0000045C R     1	  mov	edx,	OFFSET		spacer
 000000BB  E8 00000000 E     1	  call	WriteString
 000000C0  5A		     1	  pop	edx
 000000C1			_NoSpacer:
 000000C1  E2 DE		  LOOP	_DisplayArray
 000000C3  E8 00000000 E	  call	CrLf

				;---------------------------------------------------------------
				; Display sum & average of the user-entered integers. 
				;	Current subtotal is known, so invoke mDisplayString to display
				;	sum message and then call WriteVal procedure to display sum.
				;	Divide sum by number of integers (10) and invoke mDisplayString
				;	to display the truncated average message and call WriteVal to 
				;	display the rounded (down) value. 
				;---------------------------------------------------------------
				  mDisplayString	OFFSET		sumMsg
 000000C8  52		     1	  push	edx
 000000C9  BA 000003BA R     1	  mov	edx,	OFFSET		sumMsg
 000000CE  E8 00000000 E     1	  call	WriteString
 000000D3  5A		     1	  pop	edx
 000000D4  FF 35 000004DA R	  push	intSum								; [ebp + 8]
 000000DA  E8 000000ED		  call	WriteVal
 000000DF  E8 00000000 E	  call	CrLf

 000000E4  A1 000004DA R	  mov	eax,		intSum
 000000E9  99			  cdq
 000000EA  BB 0000000A		  mov	ebx,		INT_COUNT
 000000EF  F7 FB		  idiv	ebx									; Divide sum by # of values (10)	
 000000F1  A3 000004DE R	  mov	intAvg,		eax						; to obtain average
				  mDisplayString	OFFSET		truncAvgMsg	; Invoke mDisplayString
 000000F6  52		     1	  push	edx
 000000F7  BA 000003D9 R     1	  mov	edx,	OFFSET		truncAvgMsg
 000000FC  E8 00000000 E     1	  call	WriteString
 00000101  5A		     1	  pop	edx
 00000102  FF 35 000004DE R	  push	intAvg
 00000108  E8 000000BF		  call	WriteVal							; Call WriteVal to display average
 0000010D  E8 00000000 E	  call	CrLf
 00000112  E8 00000000 E	  call	CrLf


				;---------------------------------------------------------------
				; ReadFloatVal
				;---------------------------------------------------------------
				  mDisplayString	OFFSET	fltInstruct
 00000117  52		     1	  push	edx
 00000118  BA 00000249 R     1	  mov	edx,	OFFSET	fltInstruct
 0000011D  E8 00000000 E     1	  call	WriteString
 00000122  5A		     1	  pop	edx

				;---------------------------------------------------------------
				; WriteFloatVal
				;---------------------------------------------------------------


				;---------------------------------------------------------------
				; Entered decimal integers sum & average
				;---------------------------------------------------------------


				;---------------------------------------------------------------
				; Goodbye - invoke mDisplayString and pass byeMsg parameter
				;---------------------------------------------------------------
				  mDisplayString	OFFSET	 byeMsg
 00000123  52		     1	  push	edx
 00000124  BA 00000431 R     1	  mov	edx,	OFFSET	 byeMsg
 00000129  E8 00000000 E     1	  call	WriteString
 0000012E  5A		     1	  pop	edx

					Invoke ExitProcess,0	; exit to operating system
 0000012F  6A 00	   *	    push   +000000000h
 00000131  E8 00000000 E   *	    call   ExitProcess

 00000136			main ENDP


				; ------------------------------------------------------------------------------------
				; Name: ReadVal procedure
				; Description:	Invokes mGetString to read string from user keyboard input, checks if valid 
				;				entry, casts from ASCII string to signed int, passes integer to main
				; Preconditions: stringBuffer, stringCount, intArray, intPromptMsg & errorMsg declared and passed
				; Postconditions: intArray with 10 valid (<= 32-bit) signed integers returned to loop in main
				; Receives: stringBuffer (output, reference) = [ebp + 8] array to hold input string, 
				;	stringCount (input, value) = [ebp + 12] holds value of characters entered in string, 
				;	intArray (output, reference) = [ebp + 16] array to hold cast integers, 
				;	intPromptMsg (input, reference) = [ebp + 20] message to prompt user for integers, 
				;	errorMsg (input, reference) = [ebp + 24] message that user input is invalid
				; Returns:  edi with array of user-entered integers
				; ------------------------------------------------------------------------------------
 00000136			ReadVal	PROC
				  LOCAL accum:SDWORD, sign:SDWORD			; Declaring LOCAL variables pushes ebp and moves esp to ebp
 00000136  55		   *	    push   ebp
 00000137  8B EC	   *	    mov    ebp, esp
 00000139  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000013C  50			  push	eax									; accum = temp variable for current accumulator value
 0000013D  53			  push	ebx									; sign  = variable which sets current integer + or - 
 0000013E  51			  push	ecx
 0000013F  52			  push	edx
 00000140  56			  push	esi
 00000141  57			  push	edi

 00000142			_GetString:
 00000142  8B 75 08		  mov	esi,	[ebp + 8]
				  mGetString	[ebp + 20], esi, [ebp + 12]	; invoke macro to prompt user & get string
 00000145  50		     1	  push	eax
 00000146  51		     1	  push	ecx
 00000147  52		     1	  push	edx
 00000148  52		     2	  push	edx
 00000149  8B 55 14	     2	  mov	edx,	[ebp + 20]
 0000014C  E8 00000000 E     2	  call	WriteString
 00000151  5A		     2	  pop	edx
 00000152  8B D6	     1	  mov	edx,		esi	; point to the buffer
 00000154  B9 00000017	     1	  mov	ecx,		BUFF_SIZE	; specify max character allowed in string
 00000159  E8 00000000 E     1	  call	ReadString
 0000015E  89 45 0C	     1	  mov	[ebp + 12],	eax			; number of characters entered moved FROM EAX to byteCount
 00000161  5A		     1	  pop	edx
 00000162  59		     1	  pop	ecx
 00000163  58		     1	  pop	eax
 00000164  8B 4D 0C		  mov	ecx,	[ebp + 12]					; Set counter to length of string
 00000167  8B 7D 10		  mov	edi,	[ebp + 16]					; Move address of intArray to edi
 0000016A  C7 45 F8		  mov	sign,	1							; Set depending on input of user (1 - pos or -1 - neg)
	   00000001
 00000171  FC			  CLD										; Set direction flag to terate forward through array

 00000172  AC			  LODSB										; mov al, [esi] & inc esi
 00000173  3C 2B		  cmp	al,		43							; & check whether first character is
 00000175  74 10		  je	_PlusChar							; + or
 00000177  3C 2D		  cmp	al,		45
 00000179  74 05		  je	_MinusChar							; - symbol and then
 0000017B  4E			  dec	esi									; If no +/- symbol then dec esi to check digit
 0000017C  33 C0		  xor	eax,	eax							; empty the upper range of the accumulator
 0000017E  EB 0A		  jmp	_CharCheck

 00000180			_MinusChar:									; set sign accordingly to
 00000180  C7 45 F8		  mov	sign,	-1							; negative signed integer
	   FFFFFFFF
 00000187			_PlusChar:									; is positive signed integer
 00000187  49			  dec	ecx
 00000188  33 C0		  xor	eax,	eax							; empty the upper range of the accumulator

 0000018A			_CharCheck:
 0000018A  BB 0000000A		  mov	ebx,	10
 0000018F  F7 EB		  imul	ebx									; multiply accumulator by 10 & if overflow flag
 00000191  70 23		  jo	_Error								; set then invalid entry (exceeds register)
 00000193  89 45 FC		  mov	accum,	eax							; Save current accumulator
 00000196  33 C0		  xor	eax,	eax
 00000198  AC			  LODSB										; Increment ESI
 00000199  3C 30		  cmp	al,		48							; if less than 0 or
 0000019B  72 19		  jb	_Error
 0000019D  3C 39		  cmp	al,		57							; greater than 9 then invalid entry
 0000019F  77 15		  ja	_Error
 000001A1  2C 30		  sub	al,		48							; subtract 48 to cast ASCII to int
 000001A3  83 7D F8 01		  cmp	sign,	1
 000001A7  74 02		  je	_Positive
 000001A9  F7 D8		  neg	eax									; * -1 if sign is negative

 000001AB			_Positive:
 000001AB  03 45 FC		  add	eax,	accum						; Return accumulator
 000001AE  70 06		  jo	_Error								; If overflow then invalid, otherwise
 000001B0  E2 D8		  LOOP	_CharCheck

 000001B2  89 07		  mov	[edi],	eax							; move current integer to intArray
 000001B4  EB 0C		  jmp	_End

 000001B6			_Error:
				  mdisplayString [ebp + 24]					; Display error message and
 000001B6  52		     1	  push	edx
 000001B7  8B 55 18	     1	  mov	edx,	[ebp + 24]
 000001BA  E8 00000000 E     1	  call	WriteString
 000001BF  5A		     1	  pop	edx
 000001C0  EB 80		  jmp	_GetString							; return to prompt and get new string entry

 000001C2			_End:
 000001C2  5F			  pop	edi
 000001C3  5E			  pop	esi
 000001C4  5A			  pop	edx
 000001C5  59			  pop	ecx
 000001C6  5B			  pop	ebx
 000001C7  58			  pop	eax
 000001C8  C9		   *	    leave  
 000001C9  C2 0018		  ret 24									; return to main
 000001CC			ReadVal	ENDP

				; ------------------------------------------------------------------------------------
				; Name: WriteVal procedure
				; Description: Casts integers within the array to ASCII strings and invokes mDisplayString 
				;	to display values to the console.
				; Preconditions:	Array filled with 10 SDWORD integers
				; Postconditions:	Integer is displayed to console
				; Receives: value at current index of intArray (input, indirect operand) =  [ebp + 8]
				;	stringBuffer (output, reference) = [ebp + 12] array to hold ASCII strings
				; Returns:  N/A
				; ------------------------------------------------------------------------------------
 000001CC			WriteVal	PROC
				  LOCAL	num:SDWORD,	sign:SDWORD				; num  = variable to hold current integer
 000001CC  55		   *	    push   ebp
 000001CD  8B EC	   *	    mov    ebp, esp
 000001CF  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001D2  50			  push	eax									; sign = variable to set current integer as + or -
 000001D3  53			  push	ebx
 000001D4  51			  push	ecx
 000001D5  52			  push	edx
 000001D6  56			  push	esi
 000001D7  57			  push	edi

 000001D8  8B 75 08		  mov	esi,	[ebp + 8]					; Move indirect operand to esi
 000001DB  89 75 FC		  mov	num,	esi							; Move the value to a temp variable
 000001DE  C7 45 F8		  mov	sign,	1							; Initialize sign to 1 (+)
	   00000001
 000001E5  8B 7D 0C		  mov	edi,	[ebp + 12]					; Move address of stringBuffer array to edi
 000001E8  B9 00000017		  mov	ecx,	BUFF_SIZE					; Set ecx to SIZEOF stringBuffer 
 000001ED  03 F9		  add	edi,	ecx							; Move through length of stringBuffer - 1 to
 000001EF  4F			  dec	edi									; Point to last index of array
 000001F0  FD			  STD										; Set direction flag to decrement backward thru array

 000001F1  B0 00		  mov	al,		0							; Add a null-terminator at end of string
 000001F3  AA			  STOSB										; mov [edi], al & dec edi

 000001F4  83 7D FC 00		  cmp	num,	0							; If value is negative then
 000001F8  7D 0A		  jge	_WriteString
 000001FA  C7 45 F8		  mov	sign,	-1							; set sign to negative and
	   FFFFFFFF
 00000201  F7 5D FC		  neg	num									; make value positive

 00000204			_WriteString:
 00000204  8B 45 FC		  mov	eax,	num							; Move value to accumulator
 00000207  33 D2		  xor	edx,	edx
 00000209  BB 0000000A		  mov	ebx,	10
 0000020E  F7 F3		  div	ebx									; Divide by 10
 00000210  89 45 FC		  mov	num,	eax							; Store quotient
 00000213  8B C2		  mov	eax,	edx
 00000215  04 30		  add	al,		48							; Cast to ASCII string
 00000217  AA			  STOSB										; mov [edi], al & dec edi

 00000218  83 7D FC 00		  cmp	num,	0							; Check to see if last value
 0000021C  75 E6		  jne	_WriteString						; otherwise iterate

 0000021E  83 7D F8 FF		  cmp	sign,	-1							; Check to see if value is negative
 00000222  75 03		  jne	_DisplayString						; If not, move to display string
 00000224  B0 2D		  mov	al,		"-"							; otherwise add negative symbol
 00000226  AA			  STOSB										; mov [edi], al & dec edi

 00000227			_DisplayString:
 00000227  47			  inc	edi
				  mDisplayString	edi
 00000228  52		     1	  push	edx
 00000229  8B D7	     1	  mov	edx,	edi
 0000022B  E8 00000000 E     1	  call	WriteString
 00000230  5A		     1	  pop	edx

 00000231  5F			  pop	edi
 00000232  5E			  pop	esi
 00000233  5A			  pop	edx
 00000234  59			  pop	ecx
 00000235  5B			  pop	ebx
 00000236  58			  pop	eax
 00000237  C9		   *	    leave  
 00000238  C2 0008		  ret 8
 0000023B			WriteVal	ENDP
				; ------------------------------------------------------------------------------------
				; Name: ReadFloatVal procedure
				; Description: 
				; Preconditions: 
				; Postconditions: 
				; Receives: 
				; Returns:  
				; ------------------------------------------------------------------------------------

				; ------------------------------------------------------------------------------------
				; Name: WriteFloatVal procedure
				; Description: 
				; Preconditions: 
				; Postconditions: 
				; Receives: 
				; Returns:  
				; ------------------------------------------------------------------------------------

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/11/22 18:13:16
3String Primitives and Macros   (stonjeff_proj6.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000050D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000023B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000136 _TEXT	Length= 00000096 Public STDCALL
  accum  . . . . . . . . . . . .	DWord	 bp - 00000004
  sign . . . . . . . . . . . . .	DWord	 bp - 00000008
  _GetString . . . . . . . . . .	L Near	 00000142 _TEXT	
  _MinusChar . . . . . . . . . .	L Near	 00000180 _TEXT	
  _PlusChar  . . . . . . . . . .	L Near	 00000187 _TEXT	
  _CharCheck . . . . . . . . . .	L Near	 0000018A _TEXT	
  _Positive  . . . . . . . . . .	L Near	 000001AB _TEXT	
  _Error . . . . . . . . . . . .	L Near	 000001B6 _TEXT	
  _End . . . . . . . . . . . . .	L Near	 000001C2 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001CC _TEXT	Length= 0000006F Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  sign . . . . . . . . . . . . .	DWord	 bp - 00000008
  _WriteString . . . . . . . . .	L Near	 00000204 _TEXT	
  _DisplayString . . . . . . . .	L Near	 00000227 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000136 Public STDCALL
  _BuildArray  . . . . . . . . .	L Near	 00000027 _TEXT	
  _DisplayArray  . . . . . . . .	L Near	 000000A1 _TEXT	
  _NoSpacer  . . . . . . . . . .	L Near	 000000C1 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFF_SIZE  . . . . . . . . . . .	Number	 00000017h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INT_COUNT  . . . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 00000406 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byeMsg . . . . . . . . . . . . .	Byte	 00000431 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
decIntArray  . . . . . . . . . .	DWord	 0000048A _DATA	
decIntAvg  . . . . . . . . . . .	DWord	 000004EA _DATA	
decIntSum  . . . . . . . . . . .	DWord	 000004E6 _DATA	
decPromptMsg . . . . . . . . . .	Byte	 00000337 _DATA	
enteredMsg . . . . . . . . . . .	Byte	 00000394 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000351 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fltInstruct  . . . . . . . . . .	Byte	 00000249 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 00000462 _DATA	
intAvg . . . . . . . . . . . . .	DWord	 000004DE _DATA	
intCountArray  . . . . . . . . .	DWord	 000004B2 _DATA	
intCount . . . . . . . . . . . .	DWord	 000004EE _DATA	
intInstruct  . . . . . . . . . .	Byte	 0000003A _DATA	
intPromptMsg . . . . . . . . . .	Byte	 00000324 _DATA	
intSum . . . . . . . . . . . . .	DWord	 000004DA _DATA	
introMsg . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineNum  . . . . . . . . . . . .	DWord	 000004E2 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
period . . . . . . . . . . . . .	Byte	 0000045F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spacer . . . . . . . . . . . . .	Byte	 0000045C _DATA	
stringBuffer . . . . . . . . . .	Byte	 000004F2 _DATA	
stringCount  . . . . . . . . . .	DWord	 00000509 _DATA	
subtotalMsg  . . . . . . . . . .	Byte	 0000037A _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 000003BA _DATA	
truncAvgMsg  . . . . . . . . . .	Byte	 000003D9 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
